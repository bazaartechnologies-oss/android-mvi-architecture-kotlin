apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply from: 'dependencies.gradle'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'jacoco'

buildscript {
    repositories {
        maven { url 'https://plugins.gradle.org/m2/' }
    }
}

repositories {
    maven { url 'https://maven.google.com' }
    jcenter()
}

android {
    compileSdkVersion compileVersion
    buildToolsVersion buildToolsVersion

    defaultConfig {
        applicationId applicationId
        minSdkVersion minVersion
        targetSdkVersion targetVersion
        versionCode generateVersionCode()
        versionName generateVersionName()
        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    lintOptions {
        abortOnError false
    }

    bundle {
        language {
            enableSplit = false
        }
        density {
            enableSplit = false
        }
        abi {
            enableSplit = true
        }
    }

    signingConfigs {
        release {
            def propsFile = rootProject.file('keystore.properties')
            if (propsFile.exists()) {
                def props = new Properties()
                props.load(new FileInputStream(propsFile))
                storeFile = file(props['storeFile'])
                storePassword = props['storePassword']
                keyAlias = props['keyAlias']
                keyPassword = props['keyPassword']
            }

        }

    }

    buildTypes {

        debug {
            debuggable true
            minifyEnabled false
            versionNameSuffix '_debug'
        }
        release {
            signingConfig signingConfigs.release
            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility = javaSourceCompatibility
        targetCompatibility = javaTargetCompatibility
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    dataBinding {
        enabled = true
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.all {
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
            }
            useJUnitPlatform()

        }

    }

}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.1'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.1'

    implementation 'com.android.support:multidex:1.0.3'

    // JetPack
    implementation lifecycleDependency.values()
    implementation viewModelDependency.values()

    // fragment
    implementation "androidx.fragment:fragment-ktx:1.2.5"

    // paging dependency
    implementation pagingDependency.values()

    // Coil - for image loading
    implementation coilDependency.values()

    // material design
    implementation materialDependency.values()

    // retrofit
    implementation retrofitDependency.values()
    implementation("com.squareup.okhttp3:logging-interceptor:4.7.2")

    implementation logsDependency.values()

    // If not already on your classpath, you might need the jetbrains annotations
    compileOnly("org.jetbrains:annotations:13.0")
    testCompileOnly("org.jetbrains:annotations:13.0")

    // firebase
    def firebase_core_version = "17.5.1"
    def firebase_version = "17.6.0"
    implementation "com.google.firebase:firebase-core:$firebase_core_version"
    implementation "com.google.firebase:firebase-crashlytics:17.2.2"
    implementation 'com.google.firebase:firebase-config-ktx:19.2.0'
    implementation "com.google.firebase:firebase-analytics-ktx:$firebase_version"
    implementation 'com.google.firebase:firebase-firestore-ktx:21.6.0'

    // hilt
    def hilt_version = "2.28-alpha"
    implementation "com.google.dagger:dagger:2.28"
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"

    def hilt_lifecycle_version = "1.0.0-alpha02"
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:$hilt_lifecycle_version"
    implementation "androidx.hilt:hilt-common:$hilt_lifecycle_version"
    kapt "androidx.hilt:hilt-compiler:$hilt_lifecycle_version"

    // event bus
    implementation 'org.greenrobot:eventbus:3.2.0'

    // facebook shimmer
    implementation 'com.facebook.shimmer:shimmer:0.5.0'

    // test libraries
    def junit_test = "5.6.2"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_test"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_test"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junit_test"
    
    // chuck implementation
    debugImplementation 'com.readystatesoftware.chuck:library:1.1.0'
    releaseImplementation 'com.readystatesoftware.chuck:library-no-op:1.1.0'

    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    testImplementation 'org.mockito:mockito-core:3.3.3'
    testImplementation 'org.mockito:mockito-inline:3.3.3'
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.4'
    testImplementation 'com.squareup.retrofit2:retrofit-mock:2.9.0'

    implementation 'com.google.android.gms:play-services-location:17.1.0'
    implementation 'com.google.android.gms:play-services-ads-identifier:17.0.0'
    implementation 'com.google.android.gms:play-services-maps:17.0.0'

    implementation 'com.apptimize:apptimize-android:3.7.2'

}

kapt {
    correctErrorTypes true
}

def androidExclusion = [
        '**/databinding/**/*.*',
        '**/android/databinding/*Binding.*',
        '**/BR.*',
        '**/R.*',
        '**/R$*.*',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*_MembersInjector.*',
        '**/Dagger*Component.*',
        '**/Dagger*Component$Builder.*',
        '**/*Module_*Factory.*',
        '**/*Fragment*.*',
        '**/*Activity*.*',
        '**/*Adapter*.*',
        '**/*ViewPager*.*',
        '**/*ViewHolder*.*',
        '**/*Module*.*',
        '**/widget/**/*.*',
        '**/retrofit/**/*.*',
        '**/base/**/*.*',
        '**/anim/**/*.*',
        '**/environment/**/*.*',
        '**/view/**/*.*',
        '**/dialog/**/*.*',
        '**/di/**/*.*',
        '**/helper/**/*.*',
        '**/analytics/**/*.*',
        '**/model/**/*.*',
        '**/recyclerview/**/*.*',
        '**/*DataSource*.*',
        '**/*Mapper*.*',
        '**/*ViewExt*.*',
        '**/*Util*.*',
        '**/*AppApplication*.*',
        '**/*LocationManager*.*',
        '**/*Constant*.*',
]


task getCoverage(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled = true
        html.enabled = true
    }
    getClassDirectories().setFrom(fileTree(
            dir: 'build/tmp/kotlin-classes/debug',
            excludes: androidExclusion

    ))
    getSourceDirectories().setFrom(files('src/main/java'))
    getExecutionData().setFrom(files('build/jacoco/testDebugUnitTest.exec'))
}